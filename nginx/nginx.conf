#https://wiki.owasp.org/index.php/SCG_WS_nginx#SSL_Module

# This value auto allows binding worker processes automatically to available CPU
worker_processes auto;
#worker_cpu_affinity auto;

# logging
error_log /var/log/nginx/error.log warn;

pid        /var/run/nginx.pid;


events {
  multi_accept on;
  worker_connections 65535;
}

http {

 log_format upstreamlog '$server_name to: $upstream_addr [$request] '
    'upstream_response_time $upstream_response_time '
    'msec $msec response_time $request_time ';

 upstream nodeapp_service {
    least_conn;
    server nodeapp_svc0:5000;
    server nodeapp_svc1:5000;
    server nodeapp_svc2:5000;
    server nodeapp_svc3:5000;
    server nodeapp_svc4:5000;
 }

 server {
   listen 443 ssl;
   listen [::]:443 ssl ipv6only=on;
   server_name localhost;

   # MIME
   include /etc/nginx/mime.types;
   default_type application/octet-stream;
   # Display nginx Version number in error or http header may result in hacker to search for known vulnerability.
   # Therefore, the version number should be removed for every http response.
   server_tokens "off";
   charset utf-8;
   sendfile on;
   tcp_nopush on;
   tcp_nodelay on;
   #Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything within this time, the 408 (Request Time-out) error is returned to the client.
   client_body_timeout 12;
   #Defines a timeout for reading client request header. If a client does not transmit the entire header within this time, the 408 (Request Time-out) error is returned to the client.
   client_header_timeout 12;
   #The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=time” response header field. Two parameters may differ. The “Keep-Alive: timeout=time” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive connections by itself in about 60 seconds.
   keepalive_timeout 15;
   #Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed.
   send_timeout 10;
   #Size Limits & Buffer Overflows
   client_body_buffer_size 10K;
   client_header_buffer_size 1k;
   large_client_header_buffers 2 1k;
   types_hash_max_size 2048;
   client_max_body_size 50M;

   ssl_certificate           /etc/ssl/certs/nginx-selfsigned.crt;
   ssl_certificate_key       /etc/ssl/private/nginx-selfsigned.key;

   # enable session resumption to improve https performance
   # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
   ssl_session_cache shared:SSL:10m;
   ssl_session_timeout 10m;
   ssl_buffer_size 1400;
   # generated using:# openssl dhparam -dsaparam -out /etc/ssl/dh4096.pem 4096
   ssl_ecdh_curve secp384r1;
   ssl_session_tickets off;

   # enables server-side protection from BEAST attacks
   # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
   ssl_prefer_server_ciphers on;
   # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
   ssl_protocols TLSv1.2 TLSv1.3;
   # ciphers chosen for forward secrecy and compatibility
   # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
   # Disabled insecure ciphers suite. For example, MD5, DES, RC4, PSK
   ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4:@STRENGTH";

   # -!MEDIUM：exclude encryption cipher suites using 128 bit encryption.
   # -!LOW：   exclude encryption cipher suites using 64 or 56 bit encryption algorithms
   # -!EXPORT： exclude export encryption algorithms including 40 and 56 bits algorithms.
   # -!aNULL：  exclude the cipher suites offering no authentication. This is currently the anonymous DH algorithms and anonymous ECDH algorithms.
   # These cipher suites are vulnerable to a "man in the middle" attack and so their use is normally discouraged.
   # -!eNULL：exclude the "NULL" ciphers that is those offering no encryption.
   # Because these offer no encryption at all and are a security risk they are disabled unless explicitly included.
   # @STRENGTH：sort the current cipher list in order of encryption algorithm key length.

   # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
   # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
   #Cloudflare resolver 1dot1dot1dot1.cloudflare-dns.com
   resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001];
   resolver_timeout 5s;
   ssl_stapling off;
   ssl_stapling_verify on;

    access_log /var/log/nginx/access.log upstreamlog;

    location / {
      proxy_pass http://nodeapp_service;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

   # additional config
   include /etc/nginx/general.conf;
   include /etc/nginx/security.conf;
  }
}
